/**
 * Style for ApText.
 * @constructor ApTextStyle
 */

"use strict";

const React = require('react'),
      types = React.PropTypes,
      extend = require('extend'),
      ApStyle = require('apeman-react-style')['ApStyle'];

/** @lends ApTextStyle */
let ApTextStyle = React.createClass({
    displayName: 'ApTextStyle',

    propTypes: {
        scoped: types.bool,
        type: types.string,
        style: types.object,
        maxWidth: types.number
    },
    getDefaultProps: function () {
        return {
            scoped: false,
            type: 'text/css',
            style: {},
            maxWidth: 480
        };
    },
    render: function () {
        let s = this,
            props = s.props;

        let maxWidth = props.maxWidth;

        let data = {
            '.ap-text': {
                display: `block`,
                padding: `4px 8px`,
                border: `1px solid #AAA`,
                margin: `4px`,
                width: `100%`,
                maxWidth: `${ maxWidth }px`,
                borderRadius: `2px`,
                boxShadow: `1px 1px 1px rgba(0,0,0,.05) inset`
            },
            '.ap-text-multiple': {
                overflow: `auto`
            }
        },
            smallMediaData = {},
            mediumMediaData = {},
            largeMediaData = {};
        return React.createElement(
            ApStyle,
            { scoped: props.scoped,
                data: extend(data, props.style),
                smallMediaData: smallMediaData,
                mediumMediaData: mediumMediaData,
                largeMediaData: largeMediaData
            },
            props.children
        );
    }
});
module.exports = ApTextStyle;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzeC9hcF90ZXh0X3N0eWxlLmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUtBLFlBQVksQ0FBQzs7QUFFYixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO01BQzFCLEtBQUssR0FBRyxLQUFLLENBQUMsU0FBUztNQUN2QixNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztNQUMxQixPQUFPLEdBQUcsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUMsU0FBUyxDQUFDOzs7QUFBQyxBQUd2RCxJQUFJLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDOzs7QUFDaEMsYUFBUyxFQUFFO0FBQ1AsY0FBTSxFQUFFLEtBQUssQ0FBQyxJQUFJO0FBQ2xCLFlBQUksRUFBRSxLQUFLLENBQUMsTUFBTTtBQUNsQixhQUFLLEVBQUUsS0FBSyxDQUFDLE1BQU07QUFDbkIsZ0JBQVEsRUFBQyxLQUFLLENBQUMsTUFBTTtLQUN4QjtBQUNELG1CQUFlLEVBQUUsWUFBWTtBQUN6QixlQUFPO0FBQ0gsa0JBQU0sRUFBRSxLQUFLO0FBQ2IsZ0JBQUksRUFBRSxVQUFVO0FBQ2hCLGlCQUFLLEVBQUUsRUFBRTtBQUNULG9CQUFRLEVBQUUsR0FBRztTQUNoQixDQUFBO0tBQ0o7QUFDRCxVQUFNLEVBQUUsWUFBWTtBQUNoQixZQUFJLENBQUMsR0FBRyxJQUFJO1lBQ1IsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7O0FBRXBCLFlBQUksUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7O0FBRTlCLFlBQUksSUFBSSxHQUFHO0FBQ0gsc0JBQVUsRUFBRTtBQUNSLHVCQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUM7QUFDaEIsdUJBQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQztBQUNsQixzQkFBTSxFQUFFLENBQUMsY0FBYyxDQUFDO0FBQ3hCLHNCQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFDYixxQkFBSyxFQUFFLENBQUMsSUFBSSxDQUFDO0FBQ2Isd0JBQVEsRUFBRSxDQUFDLEdBQUUsUUFBUSxFQUFDLEVBQUUsQ0FBQztBQUN6Qiw0QkFBWSxFQUFFLENBQUMsR0FBRyxDQUFDO0FBQ25CLHlCQUFTLEVBQUUsQ0FBQyxpQ0FBaUMsQ0FBQzthQUNqRDtBQUNELCtCQUFtQixFQUFFO0FBQ2pCLHdCQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUM7YUFDbkI7U0FDSjtZQUNELGNBQWMsR0FBRyxFQUFFO1lBQ25CLGVBQWUsR0FBRyxFQUFFO1lBQ3BCLGNBQWMsR0FBRyxFQUFFLENBQUM7QUFDeEIsZUFDSTtBQUFDLG1CQUFPO2NBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNLEFBQUM7QUFDckIsb0JBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsQUFBQztBQUNoQyw4QkFBYyxFQUFFLGNBQWMsQUFBQztBQUMvQiwrQkFBZSxFQUFFLGVBQWUsQUFBQztBQUNqQyw4QkFBYyxFQUFFLGNBQWMsQUFBQzs7WUFDdEMsS0FBSyxDQUFDLFFBQVE7U0FBVyxDQUM3QjtLQUNMO0NBQ0osQ0FBQyxDQUFDO0FBQ0gsTUFBTSxDQUFDLE9BQU8sR0FBRyxXQUFXLENBQUMiLCJmaWxlIjoiYXBfdGV4dF9zdHlsZS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvb2t1bmlzaGl0YWthL3Byb2plY3RzL2FwZW1hbi1yZWFjdC1sYWJvL2FwZW1hbi1yZWFjdC10ZXh0L2xpYi9qc3giLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFN0eWxlIGZvciBBcFRleHQuXG4gKiBAY29uc3RydWN0b3IgQXBUZXh0U3R5bGVcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpLFxuICAgIHR5cGVzID0gUmVhY3QuUHJvcFR5cGVzLFxuICAgIGV4dGVuZCA9IHJlcXVpcmUoJ2V4dGVuZCcpLFxuICAgIEFwU3R5bGUgPSByZXF1aXJlKCdhcGVtYW4tcmVhY3Qtc3R5bGUnKVsnQXBTdHlsZSddO1xuXG4vKiogQGxlbmRzIEFwVGV4dFN0eWxlICovXG5sZXQgQXBUZXh0U3R5bGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAgcHJvcFR5cGVzOiB7XG4gICAgICAgIHNjb3BlZDogdHlwZXMuYm9vbCxcbiAgICAgICAgdHlwZTogdHlwZXMuc3RyaW5nLFxuICAgICAgICBzdHlsZTogdHlwZXMub2JqZWN0LFxuICAgICAgICBtYXhXaWR0aDp0eXBlcy5udW1iZXJcbiAgICB9LFxuICAgIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2NvcGVkOiBmYWxzZSxcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0L2NzcycsXG4gICAgICAgICAgICBzdHlsZToge30sXG4gICAgICAgICAgICBtYXhXaWR0aDogNDgwXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICBsZXQgcyA9IHRoaXMsXG4gICAgICAgICAgICBwcm9wcyA9IHMucHJvcHM7XG5cbiAgICAgICAgbGV0IG1heFdpZHRoID0gcHJvcHMubWF4V2lkdGg7XG5cbiAgICAgICAgbGV0IGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgJy5hcC10ZXh0Jzoge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBgYmxvY2tgLFxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiBgNHB4IDhweGAsXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcjogYDFweCBzb2xpZCAjQUFBYCxcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiBgNHB4YCxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGAxMDAlYCxcbiAgICAgICAgICAgICAgICAgICAgbWF4V2lkdGg6IGAke21heFdpZHRofXB4YCxcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiBgMnB4YCxcbiAgICAgICAgICAgICAgICAgICAgYm94U2hhZG93OiBgMXB4IDFweCAxcHggcmdiYSgwLDAsMCwuMDUpIGluc2V0YFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJy5hcC10ZXh0LW11bHRpcGxlJzoge1xuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdzogYGF1dG9gXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNtYWxsTWVkaWFEYXRhID0ge30sXG4gICAgICAgICAgICBtZWRpdW1NZWRpYURhdGEgPSB7fSxcbiAgICAgICAgICAgIGxhcmdlTWVkaWFEYXRhID0ge307XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8QXBTdHlsZSBzY29wZWQ9e3Byb3BzLnNjb3BlZH1cbiAgICAgICAgICAgICAgICAgICAgIGRhdGE9e2V4dGVuZChkYXRhLCBwcm9wcy5zdHlsZSl9XG4gICAgICAgICAgICAgICAgICAgICBzbWFsbE1lZGlhRGF0YT17c21hbGxNZWRpYURhdGF9XG4gICAgICAgICAgICAgICAgICAgICBtZWRpdW1NZWRpYURhdGE9e21lZGl1bU1lZGlhRGF0YX1cbiAgICAgICAgICAgICAgICAgICAgIGxhcmdlTWVkaWFEYXRhPXtsYXJnZU1lZGlhRGF0YX1cbiAgICAgICAgICAgID57cHJvcHMuY2hpbGRyZW59PC9BcFN0eWxlPlxuICAgICAgICApO1xuICAgIH1cbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBBcFRleHRTdHlsZTtcblxuXG4iXX0=